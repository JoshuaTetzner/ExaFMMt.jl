using exafmm_jll
using LinearAlgebra
using LinearMaps

abstract type FMMOptions end

"""
    HelmholtzFMMOptions{I, C} <: FMMOptions
    
Helmoltz-initializer for setup function.  

# Fields
- `p::I`: Multipole expansion order.
- `ncrit::I`: Minimum number of points in each box of the tree.
- `wavek::C`: Wavenumber.
"""
struct HelmholtzFMMOptions{I, C} <: FMMOptions
    p::I
    ncrit::I
    wavek::C
end

function HelmholtzFMMOptions(wavek::C; p=8, ncrit=100) where C <: Complex
    return HelmholtzFMMOptions(p, ncrit, wavek)
end

"""
    ModifiedHelmholtzFMMOptions{I, F} <: FMMOptions
    
Modified-Helmoltz-initializer for setup function. 

# Fields
- `p::I`: Multipole expansion order.
- `ncrit::I`: Minimum number of points in each box of the tree.
- `wavek::F`: Wavenumber.
"""
struct ModifiedHelmholtzFMMOptions{I, F} <: FMMOptions
    p::I
    ncrit::I
    wavek::F
end

function ModifiedHelmholtzFMMOptions(wavek::F; p=8, ncrit=100) where F <: Real
    return ModifiedHelmholtzFMMOptions(p, ncrit, wavek)
end

"""
    LaplaceFMMOptions{I} <: FMMOptions
    
Laplace-initializer for setup function. 

# Fields
- `p::I`: Multipole expansion order.
- `ncrit::I`: Minimum number of points in each box of the tree.
"""
struct LaplaceFMMOptions{I} <: FMMOptions
    p::I
    ncrit::I
end

function LaplaceFMMOptions(;p=8, ncrit=100)
    return LaplaceFMMOptions(p, ncrit)
end

"""
    ExaFMM{K} <: LinearMaps.LinearMap{K}

Is an type resembling the fmm matrix and can be multipied by a vector resembling for example the charges of the source points.
This type is necassary for the garbage collector to free the allocated storage of the C++ part.

# Fields
- `fmmoptions::FMMOptions`: Initializer either LaplaceFMMOptions, HelmholtzFMMOptions or ModifiedHelmholtzFMMOptions.
- `nsources::Int`: Number of sources.
- `ntargets::Int`: Number of targets.
- `fmm::Ptr{Cvoid}`: Pointer to the fmm sruct generated by the C++ part.
- `fmmstruct::Ptr{Cvoid}`: Pointer to an struct with all necassary substructs of the fmm. This pointer is mandatory for the comunication with the C++ part.
- `sources::Ptr{Cvoid}`: Pointer to the C++ struct of the sources.
- `targets::Ptr{Cvoid}`: Pointer to the C++ struct of the targets. 
"""
mutable struct ExaFMM{K} <: LinearMaps.LinearMap{K}
    fmmoptions::FMMOptions
    nsources
    ntargets
    fmm::Ptr{Cvoid}
    fmmstruct::Ptr{Cvoid}
    sources::Ptr{Cvoid}
    targets::Ptr{Cvoid}
end 

function (::ExaFMM{K})(
    fmmoptions::FMMOptions,
    nsources,
    ntargets,
    fmm::Ptr{Cvoid},
    fmmstruct::Ptr{Cvoid},
    sources::Ptr{Cvoid},
    targets::Ptr{Cvoid}
) where K

    exafmm = ExaFMM{K}(fmmoptions, nsources, ntargets, fmm, fmmstruct, sources, targets)
    finalizer(exafmm, free!)
    return exafmm
end

"""
    freeF!(x::ExaFMM{Float64})
    
Frees the storage which is allocated by the C++ part for the Laplace-FMM and Modified-Helmholtz-FMM. 

# Arguments
- `x::ExaFMM{Float64}`: ExaFMM structure with pointers to all allocated variables.
"""
function freeF!(x::ExaFMM{Float64})

    ccall(
        (:freestorage_real, exafmmt),
        Cvoid,
        (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
        x.fmm,
        x.fmmstruct,
        x.sources,
        x.targets
    )
end

"""
    freeF!(x::ExaFMM{Float32})
    
Frees the storage which is allocated by the C++ part for the Laplace-FMM and Modified-Helmholtz-FMM. 

# Arguments
- `x::ExaFMM{Float32}`: ExaFMM structure with pointers to all allocated variables.
"""
function freeF!(x::ExaFMM{Float32})

    ccall(
        (:freestorage_real, exafmmt32),
        Cvoid,
        (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
        x.fmm,
        x.fmmstruct,
        x.sources,
        x.targets
    )
end

"""
    freeC!(x::ExaFMM{ComplexF64})
    
Frees the storage which is allocated by the C++ part for Helmholtz-FMM. 

# Arguments
- `x::ExaFMM{ComplexF64}`: ExaFMM structure with pointers to all allocated variables.
"""
function freeC!(x::ExaFMM{ComplexF64})

    ccall(
        (:freestorage_cplx, exafmmt),
        Cvoid,
        (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
        x.fmm,
        x.fmmstruct,
        x.sources,
        x.targets
    )
end

"""
    freeC!(x::ExaFMM{ComplexF32})
    
Frees the storage which is allocated by the C++ part for Helmholtz-FMM. 

# Arguments
- `x::ExaFMM{ComplexF64}`: ExaFMM structure with pointers to all allocated variables.
"""
function freeC!(x::ExaFMM{ComplexF32})

    ccall(
        (:freestorage_cplx, exafmmt32),
        Cvoid,
        (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
        x.fmm,
        x.fmmstruct,
        x.sources,
        x.targets
    )
end

function Base.size(fmm::ExaFMM, dim=nothing)
    if dim === nothing
        return (fmm.ntargets, fmm.nsources)
    elseif dim == 1
        return fmm.ntargets
    elseif dim == 2
        return fmm.nsources
    else
        error("dim must be either 1 or 2")
    end
end

function Base.size(fmm::Adjoint{T}, dim=nothing) where T <: ExaFMM
    if dim === nothing
        return reverse(size(adjoint(fmm)))
    elseif dim == 1
        return size(adjoint(fmm),2)
    elseif dim == 2
        return size(adjoint(fmm),1)
    else
        error("dim must be either 1 or 2")
    end
end

@views function LinearAlgebra.mul!(y::AbstractVecOrMat, A::ExaFMM, x::AbstractVector)
    LinearMaps.check_dim_mul(y, A, x)

    fill!(y, zero(eltype(y)))
    
    y = evaluate(A, x, A.fmmoptions) 

    return y
end


@views function LinearAlgebra.mul!(
    y::AbstractVecOrMat,
    transA::LinearMaps.TransposeMap{<:Any,<:ExaFMM},
    x::AbstractVector
)
    LinearMaps.check_dim_mul(y, transA, x)

    fill!(y, zero(eltype(y)))

    y = evaluate(A, x, A.fmmoptions) 

    return y
end

@views function LinearAlgebra.mul!(
    y::AbstractVecOrMat,
    transA::LinearMaps.AdjointMap{<:Any,<:ExaFMM},
    x::AbstractVector
)
    LinearMaps.check_dim_mul(y, transA, x)

    fill!(y, zero(eltype(y)))

    y = evaluate(A, x, A.fmmoptions) 

    return y
end

"""
    init_sources(points::Matrix{F}, charges::Vector{F}) where F <: Real
    
Creates struct for sources and charges in the C++ part from the Julia matrix.
Real charges are used and mandatory for the Laplace- and Modified-Helmholtz-FMM.

# Arguments
- `points::Matrix{F}`: 3d-coordinates of sources.
- `charges::Vector{F}`: Values of for example the charge at each source location.
"""
function init_sources(points::Matrix{F}, charges::Vector{F}) where F <: Real

    if size(points)[2] != 3
        throw("Only 3D distributions.")
    end
    if size(points)[1] != length(charges)
        throw("Charges and sources must be of same length.")
    end

    return init_src(points, charges)
end

function init_src(points::Matrix{Float64}, charges::Vector{Float64})

    return ccall(
        (:init_sources_F, exafmmt),
        Ptr{Cvoid},
        (Ptr{Float64}, Ptr{Float64}, Cint),
        vec(points),
        charges,
        length(charges)
    )
end

function init_src(points::Matrix{Float32}, charges::Vector{Float32})

    return ccall(
        (:init_sources_F, exafmmt32),
        Ptr{Cvoid},
        (Ptr{Float32}, Ptr{Float32}, Cint),
        vec(points),
        charges,
        length(charges)
    )
end

"""
    init_sources(points::Matrix{F}, charges::Vector{C}) where {F <: Real, C <: Complex}
    
Creates struct for sources and charges in the C++ part from the Julia matrix.
Complex charges are used and mandatory for the Laplace- and Modified-Helmholtz-FMM.

# Arguments
- `points::Matrix{C}`: 3d-coordinates of sources.
- `charges::Vector{C}`: Values of for example the charge at each source location.
"""
function init_sources(points::Matrix{F}, charges::Vector{C}) where {F <: Real, C <: Complex}
    if size(points)[2] != 3
        throw("Only 3D distributions.")
    end
    if size(points)[1] != length(charges)
        throw("Charges and sources must be of same length.")
    end

    return init_src(points, charges)
end

function init_src(points::Matrix{Float64}, charges::Vector{ComplexF64})

    return ccall(
        (:init_sources_C, exafmmt),
        Ptr{Cvoid},
        (Ptr{Float64}, Ptr{ComplexF64}, Cint),
        vec(points),
        charges,
        length(charges)
    )
end

function init_src(points::Matrix{Float32}, charges::Vector{ComplexF32})

    return ccall(
        (:init_sources_C, exafmmt32),
        Ptr{Cvoid},
        (Ptr{Float32}, Ptr{ComplexF32}, Cint),
        vec(points),
        charges,
        length(charges)
    )
end

"""
    init_targets(points::Matrix{F}, T::Type) where F <: Real
    
Creates struct for targets in the C++ part from a Julia matrix of points. 

# Arguments
- `points::Matrix{C}`: 3d-coordinates of targets.
- `T`: Type must be set for the Helmholtz-FMM to ComplexF32 or ComplexF64.
"""
function init_targets(points::Matrix{F}, T::Type) where F <: Real
    
    if size(points)[2] != 3
        throw("Only 3D distributions.")
    end

    if T == eltype(points)
        return init_trgF(points)
    else
        return init_trgC(points)
    end
end

function init_trgC(points::Matrix{Float64})

    return ccall(
        (:init_targets_C, exafmmt),
        Ptr{Cvoid},
        (Ptr{Float64}, Cint),
        vec(points),
        size(points)[1]
    )
end

function init_trgC(points::Matrix{Float32})

    return ccall(
        (:init_targets_C, exafmmt32),
        Ptr{Cvoid},
        (Ptr{Float32}, Cint),
        vec(points),
        size(points)[1]
    )
end

function init_trgF(points::Matrix{Float64})

    return ccall(
        (:init_targets_F, exafmmt),
        Ptr{Cvoid},
        (Ptr{Float64}, Cint),
        vec(points),
        size(points)[1]
    )
end

function init_trgF(points::Matrix{Float32})

    return ccall(
        (:init_targets_F, exafmmt32),
        Ptr{Cvoid},
        (Ptr{Float32}, Cint),
        vec(points),
        size(points)[1]
    )
end

"""
    update_charges(fmmstruct::Ptr{Cvoid}, charges::Vector{Float64})
    
Updates charges in already generated Lapalce or Modified-Helmholtz-FMM.
Requires a Float64 array of charges.  

# Arguments
- `fmmstruct::Ptr{Cvoid}`: Pointer to an struct with all necassary substructs of the fmm. This pointer is mandatory for the comunication with the C++ part.
- `charges::Vector{Float64}`: Values of for example the charge at each source location. 
"""
function update_charges(fmmstruct::Ptr{Cvoid}, charges::Vector{Float64})

    ccall(
        (:update_charges_real, exafmmt),
        Cvoid,
        (Ptr{Cvoid}, Ptr{Float64}),
        fmmstruct,
        charges
    )
end

"""
    update_charges(fmmstruct::Ptr{Cvoid}, charges::Vector{Float32})
    
Updates charges in already generated Lapalce or Modified-Helmholtz-FMM.
Requires a Float32 array of charges.  

# Arguments
- `fmmstruct::Ptr{Cvoid}`: Pointer to an struct with all necassary substructs of the fmm. This pointer is mandatory for the comunication with the C++ part.
- `charges::Vector{Float32}`: Values of for example the charge at each source location. 
"""
function update_charges(fmmstruct::Ptr{Cvoid}, charges::Vector{Float32})

    ccall(
        (:update_charges_real, exafmmt32),
        Cvoid,
        (Ptr{Cvoid}, Ptr{Float32}),
        fmmstruct,
        charges
    )
end

"""
    update_charges(fmmstruct::Ptr{Cvoid}, charges::Vector{ComplexF64})
    
Updates charges in already generated Helmholtz-FMM.
Requires a ComplexF64 array of charges.

# Arguments
- `fmmstruct::Ptr{Cvoid}`: Pointer to an struct with all necassary substructs of the fmm. This pointer is mandatory for the comunication with the C++ part.
- `charges::Vector{ComplexF64}`: Values of for example the charge at each source location. 
"""
function update_charges(fmmstruct::Ptr{Cvoid}, charges::Vector{ComplexF64})

    ccall(
        (:update_charges_cplx, exafmmt),
        Cvoid,
        (Ptr{Cvoid}, Ptr{ComplexF64}),
        fmmstruct,
        charges
    )
end

"""
    update_charges(fmmstruct::Ptr{Cvoid}, charges::Vector{ComplexF32})
    
Updates charges in already generated Helmholtz-FMM.
Requires a ComplexF32 array of charges.

# Arguments
- `fmmstruct::Ptr{Cvoid}`: Pointer to an struct with all necassary substructs of the fmm. This pointer is mandatory for the comunication with the C++ part.
- `charges::Vector{ComplexF32}`: Values of for example the charge at each source location. 
"""
function update_charges(fmmstruct::Ptr{Cvoid}, charges::Vector{ComplexF32})

    ccall(
        (:update_charges_cplx, exafmmt32),
        Cvoid,
        (Ptr{Cvoid}, Ptr{ComplexF32}),
        fmmstruct,
        charges
    )
end

"""
    clear_values(fmmstruct::Ptr{Cvoid}, T::Type{Float64})
    
Clears the soultion values in the FMM structure.

# Arguments
- `fmmstruct::Ptr{Cvoid}`: Pointer to an struct with all necassary substructs of the fmm. This pointer is mandatory for the comunication with the C++ part.
- `T`: Type must be set for the Helmholtz-FMM to ComplexF32 or ComplexF64, for Laplace and Modifed-Helmholz-FMM Float64 or Flot32.
"""
function clear_values(fmmstruct::Ptr{Cvoid}, T::Type{Float64})
    
    ccall(
        (:clear_values, exafmmt),
        Cvoid,
        (Ptr{Cvoid},),
        fmmstruct
    )
end

"""
    clear_values(fmmstruct::Ptr{Cvoid}, T::Type{Float32})
    
Clears the soultion values in the FMM structure.

# Arguments
- `fmmstruct::Ptr{Cvoid}`: Pointer to an struct with all necassary substructs of the fmm. This pointer is mandatory for the comunication with the C++ part.
- `T`: Type must be set for the Helmholtz-FMM to ComplexF32 or ComplexF64, for Laplace and Modifed-Helmholz-FMM Float64 or Flot32.
"""
function clear_values(fmmstruct::Ptr{Cvoid}, T::Type{Float32})
    
    ccall(
        (:clear_values, exafmmt32),
        Cvoid,
        (Ptr{Cvoid},),
        fmmstruct
    )
end

"""
    clear_values(fmmstruct::Ptr{Cvoid}, T::Type{ComplexF64})
    
Clears the soultion values in the FMM structure.

# Arguments
- `fmmstruct::Ptr{Cvoid}`: Pointer to an struct with all necassary substructs of the fmm. This pointer is mandatory for the comunication with the C++ part.
- `T`: Type must be set for the Helmholtz-FMM to ComplexF32 or ComplexF64, for Laplace and Modifed-Helmholz-FMM Float64 or Flot32.
"""
function clear_values(fmmstruct::Ptr{Cvoid}, T::Type{ComplexF64})
    
    ccall(
        (:clear_values, exafmmt),
        Cvoid,
        (Ptr{Cvoid},),
        fmmstruct
    )
end

"""
    clear_values(fmmstruct::Ptr{Cvoid}, T::Type{ComplexF32})
    
Clears the soultion values in the FMM structure.

# Arguments
- `fmmstruct::Ptr{Cvoid}`: Pointer to an struct with all necassary substructs of the fmm. This pointer is mandatory for the comunication with the C++ part.
- `T`: Type must be set for the Helmholtz-FMM to ComplexF32 or ComplexF64, for Laplace and Modifed-Helmholz-FMM Float64 or Flot32.
"""
function clear_values(fmmstruct::Ptr{Cvoid}, T::Type{ComplexF32})
    
    ccall(
        (:clear_values, exafmmt32),
        Cvoid,
        (Ptr{Cvoid},),
        fmmstruct
    )
end